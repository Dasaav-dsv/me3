on:
  release:
    types:
      - released
  push:
  workflow_dispatch:
name: Publishing
concurrency:
  group: ${{ github.workflow }}-${{ github.event.release.name || github.ref }}
  cancel-in-progress: true

jobs:
  publish-installer:
    name: Installer
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      attestations: write
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          targets: x86_64-pc-windows-msvc,x86_64-unknown-linux-musl
      - uses: ./.github/actions/setup-windows-toolchain
      - name: Install musl-tools
        run: sudo apt-get install --yes musl-tools
      - uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
        with:
          cache-on-failure: true
      - run: |
          cargo build --target x86_64-pc-windows-msvc --all --release --features=sentry
          cargo build --target x86_64-unknown-linux-musl -p me3-cli --release --features=sentry
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      - run: |
          ls target/
          ls target/release
          ls target/x86_64-pc-windows-msvc/release

      - name: Install NSIS
        run: |
          sudo apt-get install nsis

      - run: |
          echo "version=$(cargo pkgid -p me3-mod-host | cut -d '@' -f2)" >> $GITHUB_OUTPUT
        id: get_version
        shell: bash

      - name: Build installer
        run: makensis -DTARGET_DIR="${{ github.workspace }}/target/x86_64-pc-windows-msvc/release/" -DVERSION=${{ steps.get_version.outputs.version }} installer.nsi "-XOutFile me3_installer.exe"

      - name: Upload installer
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: me3-installer
          path: me3_installer.exe

      - uses: taiki-e/install-action@2ee2c006bbe55b0c2924d63f440aa76ecdd09aea # v2.52.3
        with:
          tool: cargo-cyclonedx

      - name: Generate SBOMs
        run: |
          cargo cyclonedx --target=x86_64-pc-windows-msvc --target-in-filename --format=json
          cargo cyclonedx --target=x86_64-unknown-linux-musl --target-in-filename --format=json

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@db473fddc028af60658334401dc6fa3ffd8669fd # v2.3.0
        with:
          subject-path: |
            me3_installer.exe
      - uses: actions/attest-sbom@v2
        with:
          subject-path: "target/x86_64-pc-windows-msvc/release/me3_mod_host.dll"
          sbom-path: "crates/mod-host/me3-mod-host_x86_64-pc-windows-msvc.cdx.json"

      - uses: actions/attest-sbom@v2
        with:
          subject-path: "target/x86_64-pc-windows-msvc/release/me3-launcher.exe"
          sbom-path: "crates/launcher/me3-launcher_x86_64-pc-windows-msvc.cdx.json"

      - uses: actions/attest-sbom@v2
        with:
          subject-path: "target/x86_64-pc-windows-msvc/release/me3.exe"
          sbom-path: "crates/cli/me3-cli_x86_64-pc-windows-msvc.cdx.json"

      - uses: actions/attest-sbom@v2
        with:
          subject-path: "target/x86_64-unknown-linux-musl/release/me3"
          sbom-path: "crates/cli/me3-cli_x86_64-unknown-linux-musl.cdx.json"

      - run: |
          set +e

          echo "RELEASE_TAG=prerelease" >> "$GITHUB_ENV"
          echo "RELEASE_IS_PRERELEASE=true" >> "$GITHUB_ENV"

          if gh release view prerelease -R garyttierney/me3 ; then
              gh release delete prerelease -R garyttierney/me3 -y --cleanup-tag
              sleep 5s
          fi

          release_notes=$(awk 'NR == 1, /^## / { next }; /^## / { exit }; { print }' CHANGELOG.md )

          gh release create "prerelease" -p -n "$release_notes"
        env:
          GH_TOKEN: ${{ github.token }}
        if: github.event_name != 'release' && github.ref_name == 'main'

      - run: |
          echo "RELEASE_TAG=${{ github.event.release.tag_name }}" >> "$GITHUB_ENV"
          echo "RELEASE_IS_PRERELEASE=false" >> "$GITHUB_ENV"
        if: github.event_name == 'release'

      - run: |
          echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          echo "is_prerelease=$RELEASE_IS_PRERELEASE" >> "$GITHUB_OUTPUT"
        id: collect-release-info

      - name: Upload installer to release
        run: >-
          gh release upload --clobber -R garyttierney/me3 "${{ steps.collect-release-info.outputs.release_tag }}"
          me3_installer.exe
          target/x86_64-pc-windows-msvc/release/me3_mod_host.dll
          target/x86_64-pc-windows-msvc/release/me3-launcher.exe
          target/x86_64-pc-windows-msvc/release/me3.exe
          target/x86_64-unknown-linux-musl/release/me3
        env:
          GH_TOKEN: ${{ github.token }}
        if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main')

      - name: Setup Sentry CLI
        uses: matbour/setup-sentry-cli@4cb3adf3ade6f5776a298102a9fb9e29e41bf89d # v1.3.0
        with:
          version: latest
          token: ${{ secrets.SENTRY_AUTH_TOKEN }} # from GitHub secrets
          organization: modengine
          project: me3
        if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main')

      - name: Create Sentry release
        uses: getsentry/action-release@00ed2a6cc2171514e031a0f5b4b3cdc586dc171a # v3.1.1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: modengine
          SENTRY_PROJECT: me3
        with:
          release: "$${{ steps.collect-release-info.outputs.release_tag }}"
          finalize: "${{ steps.collect-release-info.outputs.is_prerelease == 'false' }}"
        if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main')

      - name: Upload debug symbols to sentry
        run: |
          sentry-cli debug-files upload --include-sources -o modengine -p me3 target/x86_64-pc-windows-msvc/release/
        if: github.event_name == 'release' || (github.event_name == 'push' && github.ref_name == 'main')
  test-windows:
    name: End-to-end tests (Windows)
    needs:
      - publish-installer
    runs-on: windows-latest
    steps:
      - name: Download installer
        uses: actions/download-artifact@v4
        with:
          name: me3-installer
      - run: ./me3_installer.exe /S

      - run: |
          Import-Module "$env:ChocolateyInstall/helpers/chocolateyInstaller.psm1"
          refreshenv
          me3.exe info
        shell: pwsh
